from __future__ import annotations

from typing import TYPE_CHECKING
from warnings import warn

from pyiron_atomistics import Project

from pyiron_contrib.workflow.util import DotDict
from pyiron_contrib.workflow.workflow import Workflow


if TYPE_CHECKING:
    from pyiron_contrib.workflow.nodes import Node


class Session:
    def __init__(self, name: str):
        self.name = name
        self.workflows = DotDict()
        self._pr = Project(name)  # Right now we will just _look_ like we're different.

    def create_workflow(self, *nodes: Node, name: str = None):
        if name is not None and name in self.workflows.keys():
            warn(f"{name} is already a workflow; nothing new created.")
            return
        elif name is None:
            name = self._generate_name()
        wf = Workflow(name, *nodes)
        self.workflows[name] = wf
        return wf

    def _generate_name(self):
        i = len(self.workflows)
        name = f"WF{i}"
        while name in self.workflows.keys():
            i += 1
            name = f"WF{i}"
        return name

    def remove(self, enable=False):
        """
        Removes all stored data (database and file storage) generated by children.
        """
        if enable:
            self._pr.remove_jobs_silently(recursive=True)
            self._pr.remove(enable=True)
